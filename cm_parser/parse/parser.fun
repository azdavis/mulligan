(* File generated by CM-Yacc version 2.1 *)

functor ParserFun
   (structure Streamable : STREAMABLE
    structure Arg :
       sig
          type elem
          type symbol
          type files
          type export
          type exports
          type main

          val main_prog : exports * files -> main
          val cons_exports : export * exports -> exports
          val nil_exports : unit -> exports
          val functor_export : symbol -> export
          val signature_export : symbol -> export
          val structure_export : symbol -> export
          val cons_files : elem * files -> files
          val nil_files : unit -> files

          datatype terminal =
             ELEM of elem
           | LIBRARY
           | GROUP
           | STRUCTURE
           | SIGNATURE
           | FUNCTOR
           | IDENT of symbol
           | IS
           | EOF

          val error : terminal Streamable.t -> exn
       end)
   :>
   sig
      val parse : Arg.terminal Streamable.t -> Arg.main * Arg.terminal Streamable.t
   end
=

(*

AUTOMATON LISTING
=================

State 0:

start -> . Main  / 0
7 : Main -> . GROUP Exports IS Files  / 0
8 : Main -> . LIBRARY Exports IS Files  / 0

LIBRARY => shift 1
GROUP => shift 2
Main => goto 3

-----

State 1:

2 : Export -> . STRUCTURE IDENT  / 1
3 : Export -> . SIGNATURE IDENT  / 1
4 : Export -> . FUNCTOR IDENT  / 1
5 : Exports -> .  / 2
6 : Exports -> . Export Exports  / 2
8 : Main -> LIBRARY . Exports IS Files  / 0

STRUCTURE => shift 8
SIGNATURE => shift 7
FUNCTOR => shift 6
IS => reduce 5
Export => goto 5
Exports => goto 4

-----

State 2:

2 : Export -> . STRUCTURE IDENT  / 1
3 : Export -> . SIGNATURE IDENT  / 1
4 : Export -> . FUNCTOR IDENT  / 1
5 : Exports -> .  / 2
6 : Exports -> . Export Exports  / 2
7 : Main -> GROUP . Exports IS Files  / 0

STRUCTURE => shift 8
SIGNATURE => shift 7
FUNCTOR => shift 6
IS => reduce 5
Export => goto 5
Exports => goto 9

-----

State 3:

start -> Main .  / 0

$ => accept

-----

State 4:

8 : Main -> LIBRARY Exports . IS Files  / 0

IS => shift 10

-----

State 5:

2 : Export -> . STRUCTURE IDENT  / 1
3 : Export -> . SIGNATURE IDENT  / 1
4 : Export -> . FUNCTOR IDENT  / 1
5 : Exports -> .  / 2
6 : Exports -> . Export Exports  / 2
6 : Exports -> Export . Exports  / 2

STRUCTURE => shift 8
SIGNATURE => shift 7
FUNCTOR => shift 6
IS => reduce 5
Export => goto 5
Exports => goto 11

-----

State 6:

4 : Export -> FUNCTOR . IDENT  / 1

IDENT => shift 12

-----

State 7:

3 : Export -> SIGNATURE . IDENT  / 1

IDENT => shift 13

-----

State 8:

2 : Export -> STRUCTURE . IDENT  / 1

IDENT => shift 14

-----

State 9:

7 : Main -> GROUP Exports . IS Files  / 0

IS => shift 15

-----

State 10:

0 : Files -> . EOF  / 0
1 : Files -> . ELEM Files  / 0
8 : Main -> LIBRARY Exports IS . Files  / 0

ELEM => shift 18
EOF => shift 17
Files => goto 16

-----

State 11:

6 : Exports -> Export Exports .  / 2

IS => reduce 6

-----

State 12:

4 : Export -> FUNCTOR IDENT .  / 1

STRUCTURE => reduce 4
SIGNATURE => reduce 4
FUNCTOR => reduce 4
IS => reduce 4

-----

State 13:

3 : Export -> SIGNATURE IDENT .  / 1

STRUCTURE => reduce 3
SIGNATURE => reduce 3
FUNCTOR => reduce 3
IS => reduce 3

-----

State 14:

2 : Export -> STRUCTURE IDENT .  / 1

STRUCTURE => reduce 2
SIGNATURE => reduce 2
FUNCTOR => reduce 2
IS => reduce 2

-----

State 15:

0 : Files -> . EOF  / 0
1 : Files -> . ELEM Files  / 0
7 : Main -> GROUP Exports IS . Files  / 0

ELEM => shift 18
EOF => shift 17
Files => goto 19

-----

State 16:

8 : Main -> LIBRARY Exports IS Files .  / 0

$ => reduce 8

-----

State 17:

0 : Files -> EOF .  / 0

$ => reduce 0

-----

State 18:

0 : Files -> . EOF  / 0
1 : Files -> . ELEM Files  / 0
1 : Files -> ELEM . Files  / 0

ELEM => shift 18
EOF => shift 17
Files => goto 20

-----

State 19:

7 : Main -> GROUP Exports IS Files .  / 0

$ => reduce 7

-----

State 20:

1 : Files -> ELEM Files .  / 0

$ => reduce 1

-----

lookahead 0 = $ 
lookahead 1 = STRUCTURE SIGNATURE FUNCTOR IS 
lookahead 2 = IS 

*)

struct
local
structure Value = struct
datatype nonterminal =
nonterminal
| elem of Arg.elem
| symbol of Arg.symbol
| files of Arg.files
| export of Arg.export
| exports of Arg.exports
| main of Arg.main
end
structure ParseEngine = ParseEngineFun (structure Streamable = Streamable
type terminal = Arg.terminal
type value = Value.nonterminal
val dummy = Value.nonterminal
fun read terminal =
(case terminal of
Arg.ELEM x => (1, Value.elem x)
| Arg.LIBRARY => (2, Value.nonterminal)
| Arg.GROUP => (3, Value.nonterminal)
| Arg.STRUCTURE => (4, Value.nonterminal)
| Arg.SIGNATURE => (5, Value.nonterminal)
| Arg.FUNCTOR => (6, Value.nonterminal)
| Arg.IDENT x => (7, Value.symbol x)
| Arg.IS => (8, Value.nonterminal)
| Arg.EOF => (9, Value.nonterminal)
)
)
in
val parse = ParseEngine.parse (
ParseEngine.next5x1 "\128\128\130\131\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\137\136\135\128y\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\137\136\135\128y\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\127\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\139\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\137\136\135\128yx\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128zzz\128z\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128{{{\128{\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128|||\128|\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\147\128\128\128\128\128\128\128\146\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128v\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128~\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\147\128\128\128\128\128\128\128\146\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128w\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128}\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128",
ParseEngine.next5x
Vector.fromList [(0,1,(fn _::rest => Value.files(Arg.nil_files {})::rest|_=>raise (Fail "bad parser"))),
(0,2,(fn Value.files(arg0)::Value.elem(arg1)::rest => Value.files(Arg.cons_files {2=arg0,1=arg1})::rest|_=>raise (Fail "bad parser"))),
(1,2,(fn Value.symbol(arg0)::_::rest => Value.export(Arg.structure_export arg0)::rest|_=>raise (Fail "bad parser"))),
(1,2,(fn Value.symbol(arg0)::_::rest => Value.export(Arg.signature_export arg0)::rest|_=>raise (Fail "bad parser"))),
(1,2,(fn Value.symbol(arg0)::_::rest => Value.export(Arg.functor_export arg0)::rest|_=>raise (Fail "bad parser"))),
(2,0,(fn rest => Value.exports(Arg.nil_exports {})::rest)),
(2,2,(fn Value.exports(arg0)::Value.export(arg1)::rest => Value.exports(Arg.cons_exports {2=arg0,1=arg1})::rest|_=>raise (Fail "bad parser"))),
(3,4,(fn Value.files(arg0)::_::Value.exports(arg1)::_::rest => Value.main(Arg.main_prog {2=arg0,1=arg1})::rest|_=>raise (Fail "bad parser"))),
(3,4,(fn Value.files(arg0)::_::Value.exports(arg1)::_::rest => Value.main(Arg.main_prog {2=arg0,1=arg1})::rest|_=>raise (Fail "bad parser")))],
(fn Value.main x => x | _ => raise (Fail "bad parser")), Arg.error)
end
end
