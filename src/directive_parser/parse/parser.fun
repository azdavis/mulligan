(* File generated by CM-Yacc version 2.1 *)

functor ParserFun
   (structure Streamable : STREAMABLE
    structure Arg :
       sig
          type int
          type longid
          type value
          type directive

          val main : directive -> directive
          val run : unit -> directive
          val typeof_id : longid -> directive
          val do_help : unit -> directive
          val num_last : int -> directive
          val bare_last : unit -> directive
          val report : longid -> directive
          val change_setting : longid * value -> directive
          val break_fn : longid -> directive
          val break_bind : longid -> directive
          val sym_print : longid -> directive
          val sym_clear : longid -> directive
          val bare_clear : unit -> directive
          val num_reveal : int -> directive
          val bare_reveal : unit -> directive
          val num_prev : int -> directive
          val prev : unit -> directive
          val stop : unit -> directive
          val step : unit -> directive
          val value_num : int -> value
          val value_ident : longid -> value

          datatype terminal =
             NUM of int
           | IDENT of longid
           | STEP
           | REVEAL
           | STOP
           | EQUAL
           | SET
           | PREV
           | BREAKBIND
           | BREAKFN
           | RUN
           | CLEAR
           | PRINT
           | REPORT
           | LAST
           | HELP
           | TYPEOF
           | EOF

          val error : terminal Streamable.t -> exn
       end)
   :>
   sig
      val parse : Arg.terminal Streamable.t -> Arg.directive * Arg.terminal Streamable.t
   end
=

(*

AUTOMATON LISTING
=================

State 0:

start -> . Main  / 0
2 : Directive -> . STEP  / 1
3 : Directive -> . STOP  / 1
4 : Directive -> . PREV  / 1
5 : Directive -> . PREV NUM  / 1
6 : Directive -> . REVEAL  / 1
7 : Directive -> . REVEAL NUM  / 1
8 : Directive -> . CLEAR  / 1
9 : Directive -> . CLEAR IDENT  / 1
10 : Directive -> . PRINT IDENT  / 1
11 : Directive -> . BREAKBIND IDENT  / 1
12 : Directive -> . BREAKFN IDENT  / 1
13 : Directive -> . SET IDENT EQUAL Value  / 1
14 : Directive -> . REPORT IDENT  / 1
15 : Directive -> . LAST  / 1
16 : Directive -> . LAST NUM  / 1
17 : Directive -> . HELP  / 1
18 : Directive -> . TYPEOF IDENT  / 1
19 : Directive -> . RUN  / 1
20 : Main -> . Directive EOF  / 0

STEP => shift 6
REVEAL => shift 5
STOP => shift 4
SET => shift 3
PREV => shift 9
BREAKBIND => shift 8
BREAKFN => shift 7
RUN => shift 2
CLEAR => shift 11
PRINT => shift 14
REPORT => shift 13
LAST => shift 12
HELP => shift 15
TYPEOF => shift 10
Directive => goto 1
Main => goto 16

-----

State 1:

20 : Main -> Directive . EOF  / 0

EOF => shift 17

-----

State 2:

19 : Directive -> RUN .  / 1

EOF => reduce 19

-----

State 3:

13 : Directive -> SET . IDENT EQUAL Value  / 1

IDENT => shift 18

-----

State 4:

3 : Directive -> STOP .  / 1

EOF => reduce 3

-----

State 5:

6 : Directive -> REVEAL .  / 1
7 : Directive -> REVEAL . NUM  / 1

NUM => shift 19
EOF => reduce 6

-----

State 6:

2 : Directive -> STEP .  / 1

EOF => reduce 2

-----

State 7:

12 : Directive -> BREAKFN . IDENT  / 1

IDENT => shift 20

-----

State 8:

11 : Directive -> BREAKBIND . IDENT  / 1

IDENT => shift 21

-----

State 9:

4 : Directive -> PREV .  / 1
5 : Directive -> PREV . NUM  / 1

NUM => shift 22
EOF => reduce 4

-----

State 10:

18 : Directive -> TYPEOF . IDENT  / 1

IDENT => shift 23

-----

State 11:

8 : Directive -> CLEAR .  / 1
9 : Directive -> CLEAR . IDENT  / 1

IDENT => shift 24
EOF => reduce 8

-----

State 12:

15 : Directive -> LAST .  / 1
16 : Directive -> LAST . NUM  / 1

NUM => shift 25
EOF => reduce 15

-----

State 13:

14 : Directive -> REPORT . IDENT  / 1

IDENT => shift 26

-----

State 14:

10 : Directive -> PRINT . IDENT  / 1

IDENT => shift 27

-----

State 15:

17 : Directive -> HELP .  / 1

EOF => reduce 17

-----

State 16:

start -> Main .  / 0

$ => accept

-----

State 17:

20 : Main -> Directive EOF .  / 0

$ => reduce 20

-----

State 18:

13 : Directive -> SET IDENT . EQUAL Value  / 1

EQUAL => shift 28

-----

State 19:

7 : Directive -> REVEAL NUM .  / 1

EOF => reduce 7

-----

State 20:

12 : Directive -> BREAKFN IDENT .  / 1

EOF => reduce 12

-----

State 21:

11 : Directive -> BREAKBIND IDENT .  / 1

EOF => reduce 11

-----

State 22:

5 : Directive -> PREV NUM .  / 1

EOF => reduce 5

-----

State 23:

18 : Directive -> TYPEOF IDENT .  / 1

EOF => reduce 18

-----

State 24:

9 : Directive -> CLEAR IDENT .  / 1

EOF => reduce 9

-----

State 25:

16 : Directive -> LAST NUM .  / 1

EOF => reduce 16

-----

State 26:

14 : Directive -> REPORT IDENT .  / 1

EOF => reduce 14

-----

State 27:

10 : Directive -> PRINT IDENT .  / 1

EOF => reduce 10

-----

State 28:

0 : Value -> . IDENT  / 1
1 : Value -> . NUM  / 1
13 : Directive -> SET IDENT EQUAL . Value  / 1

NUM => shift 31
IDENT => shift 30
Value => goto 29

-----

State 29:

13 : Directive -> SET IDENT EQUAL Value .  / 1

EOF => reduce 13

-----

State 30:

0 : Value -> IDENT .  / 1

EOF => reduce 0

-----

State 31:

1 : Value -> NUM .  / 1

EOF => reduce 1

-----

lookahead 0 = $ 
lookahead 1 = EOF 

*)

struct
local
structure Value = struct
datatype nonterminal =
nonterminal
| int of Arg.int
| longid of Arg.longid
| value of Arg.value
| directive of Arg.directive
end
structure ParseEngine = ParseEngineFun (structure Streamable = Streamable
type terminal = Arg.terminal
type value = Value.nonterminal
val dummy = Value.nonterminal
fun read terminal =
(case terminal of
Arg.NUM x => (1, Value.int x)
| Arg.IDENT x => (2, Value.longid x)
| Arg.STEP => (3, Value.nonterminal)
| Arg.REVEAL => (4, Value.nonterminal)
| Arg.STOP => (5, Value.nonterminal)
| Arg.EQUAL => (6, Value.nonterminal)
| Arg.SET => (7, Value.nonterminal)
| Arg.PREV => (8, Value.nonterminal)
| Arg.BREAKBIND => (9, Value.nonterminal)
| Arg.BREAKFN => (10, Value.nonterminal)
| Arg.RUN => (11, Value.nonterminal)
| Arg.CLEAR => (12, Value.nonterminal)
| Arg.PRINT => (13, Value.nonterminal)
| Arg.REPORT => (14, Value.nonterminal)
| Arg.LAST => (15, Value.nonterminal)
| Arg.HELP => (16, Value.nonterminal)
| Arg.TYPEOF => (17, Value.nonterminal)
| Arg.EOF => (18, Value.nonterminal)
)
)
in
val parse = ParseEngine.parse (
ParseEngine.next5x1 "\128\128\128\135\134\133\128\132\138\137\136\131\140\143\142\141\144\139\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\146\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128k\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\147\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128{\128\128\128\128\128\128\128\128\128\128\128\128\128\128\148\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128x\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128|\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\149\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\150\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\151\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128z\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\152\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\153\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128v\128\128\128\128\128\128\128\128\128\128\128\128\128\128\154\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128o\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\155\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\156\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128m\128\128\128\128\128\128\128\128\128\128\128\128\128\127\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128j\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\157\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128w\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128r\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128s\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128y\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128l\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128u\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128n\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128p\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128t\128\128\128\128\128\128\128\128\128\128\128\128\128\128\160\159\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128q\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128~\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128}\128\128\128\128\128\128\128\128\128\128\128\128\128",
ParseEngine.next5x
Vector.fromList [(0,1,(fn Value.longid(arg0)::rest => Value.value(Arg.value_ident arg0)::rest|_=>raise (Fail "bad parser"))),
(0,1,(fn Value.int(arg0)::rest => Value.value(Arg.value_num arg0)::rest|_=>raise (Fail "bad parser"))),
(1,1,(fn _::rest => Value.directive(Arg.step {})::rest|_=>raise (Fail "bad parser"))),
(1,1,(fn _::rest => Value.directive(Arg.stop {})::rest|_=>raise (Fail "bad parser"))),
(1,1,(fn _::rest => Value.directive(Arg.prev {})::rest|_=>raise (Fail "bad parser"))),
(1,2,(fn Value.int(arg0)::_::rest => Value.directive(Arg.num_prev arg0)::rest|_=>raise (Fail "bad parser"))),
(1,1,(fn _::rest => Value.directive(Arg.bare_reveal {})::rest|_=>raise (Fail "bad parser"))),
(1,2,(fn Value.int(arg0)::_::rest => Value.directive(Arg.num_reveal arg0)::rest|_=>raise (Fail "bad parser"))),
(1,1,(fn _::rest => Value.directive(Arg.bare_clear {})::rest|_=>raise (Fail "bad parser"))),
(1,2,(fn Value.longid(arg0)::_::rest => Value.directive(Arg.sym_clear arg0)::rest|_=>raise (Fail "bad parser"))),
(1,2,(fn Value.longid(arg0)::_::rest => Value.directive(Arg.sym_print arg0)::rest|_=>raise (Fail "bad parser"))),
(1,2,(fn Value.longid(arg0)::_::rest => Value.directive(Arg.break_bind arg0)::rest|_=>raise (Fail "bad parser"))),
(1,2,(fn Value.longid(arg0)::_::rest => Value.directive(Arg.break_fn arg0)::rest|_=>raise (Fail "bad parser"))),
(1,4,(fn Value.value(arg0)::_::Value.longid(arg1)::_::rest => Value.directive(Arg.change_setting {2=arg0,1=arg1})::rest|_=>raise (Fail "bad parser"))),
(1,2,(fn Value.longid(arg0)::_::rest => Value.directive(Arg.report arg0)::rest|_=>raise (Fail "bad parser"))),
(1,1,(fn _::rest => Value.directive(Arg.bare_last {})::rest|_=>raise (Fail "bad parser"))),
(1,2,(fn Value.int(arg0)::_::rest => Value.directive(Arg.num_last arg0)::rest|_=>raise (Fail "bad parser"))),
(1,1,(fn _::rest => Value.directive(Arg.do_help {})::rest|_=>raise (Fail "bad parser"))),
(1,2,(fn Value.longid(arg0)::_::rest => Value.directive(Arg.typeof_id arg0)::rest|_=>raise (Fail "bad parser"))),
(1,1,(fn _::rest => Value.directive(Arg.run {})::rest|_=>raise (Fail "bad parser"))),
(2,2,(fn _::Value.directive(arg0)::rest => Value.directive(Arg.main arg0)::rest|_=>raise (Fail "bad parser")))],
(fn Value.directive x => x | _ => raise (Fail "bad parser")), Arg.error)
end
end
